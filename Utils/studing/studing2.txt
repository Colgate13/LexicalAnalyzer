Analise Lexica

Primeira etapa do compilador

Funcoes:

* Ler o arquivo com o programa fonte;
* Identificar os tokens correspondentes;
* Relatar errors

* Exemplo de tokens
  * Identificadores
  * Palavras reservadas e simbolos especias
  * Numeros

Exemplo

x:=y*2;

Cadeira | token
x       | id
:=      | simb_atrib
y       | id
*       | simb_mult
2       | num
;       | simb_pv

ou posso usar como numeros que representam o token
1 = id
2 = num
3 = simb_mult
4 = simb_atrib
5 = simb_pv

Cadeira | token
x       | 1
:=      | 4
y       | 1
*       | 3
2       | 2
;       | 5

o ideal é o analiador lexico seja chamado pelo analisador sintático
sob demanada

Em geral, subordinado ao analisador sintático
 Sub-rotina do analisador sintático: a cada chamada, o analiador lexico
 retorna para o analisador sintatico uma cadeia lida e o token correspondentes

O analisador sintatico combina os tokens e verifica
a boa formacao (sintaxe) do programa-fonte usando a gramatica
da linguagem
                                    obter prox token
Programa fonte -> analisador lexico <--------------> analisador sintatico ->
                                         token

Porque separa o lexio do sintatico

Modularizacao

Projeto mais simples de cada etapa

Maior eficiencia de cada processo: possibilidade de uso de tecnicas especificas e metodos de otimicacoes locais

Maior portabilidade: especificidades da linguagem de prorgamacao
podem ser resolvidas no analisador lexico

Facilidade de manutencao: alteracoes na linguagem de programacao

É mais facil para o analisador lexio separar identificadores de parabras reservadas

* Outras funcoes do analisador lexico

- Consumir comentarios e caracteres nao imprimiveis (espaco em branco, tabulacao, codigo de nova linha e etc);
- Possivel manipulacao de tabela de simbolos;
- Relacionar as mensagens de erro emitidas pelo compilador com o codigo fonte
- Diagnostico e tratamentos de errors

* Tipos de erros Lexicos:

  - Simbolo nao pertence ao conjunto de simbolos terminais da linguagem:
    Nao ha automato para reconhecer esse simbolo
  
  - identificador mal formado: @j, 1a

  - Tamanho do identificador: minha_variavel_para..... (maior que o permitido)

  - Numero mal formado: 1.a3
    Estado final do automato de numeros reais nao é atingido

  - Tamanho excessivo de um numero: 12345678901234567890

  - Fim de arquivo inesperado (comentario nao fechado): {....
    Estado final do automato de comentario nao é atingido

  - Char ou string mal formados: 'a, "hello world
    Estado final do automato de char ou string nao é atingido

* Sao limitados os erros detectaveis nessa etapa
  * Visal local do programa-fonte, sem contexto


* É desejavel que se use notacoes formais para especificar e
reconhecer a estrutura dos tokens que serao retornados pelo analisador lexico

  - Evitam-se erros;
  - Mapeamente mais consistente e direto para o programa de analise Lexica

* notacoes
  * Gramaticas ou expressoes regulares: especificacao de tokens;
  * automatos finitos: reconhecimento de tokens

Expressoes regulares

* Determina conjuntos de cadeias validas:
  - Linguagem

  Exemplos:
    - Identificador: letra (letra | digito)*
    - Numero inteiro sem sinal: digito+
    - numero inteiro com sinal: (+ | -) digito+

Automatos Finitos

Modelos matematicos:
  - Conjunto de estados S;
  - Conjunto de simbolos de entrada Sigma;
  - Funcoes de transicao que mapeiam um par estado-simbolo de entrqada em um novo estado
  - Estado inicial S0
  - Conjunto de estados finais F

  Reconhecimento de cadeias validas
  - Uma cadeia é reconhecida se existe um percurso de estado inicial ate um estado final


S = {0,1,2,3}, Sigma={a,b}, S0=0, F={3}

, significa OU, 0 ou 1 = 0,1

Estado atual | Simbolo de entrada | Proximo estado
    0                   a               0,1
    0                   b               0
    1                   b               2
    2                   b               3

Sempre vai terminar em bb podendo ter quanto ab na frente do bb

(a | b)*abb

Exemplo para: aabb

Estado atual | Simbolo de entrada | Proximo estado
    0                   a               0
    0                   a               1
    1                   b               2
    2                   b               3

Exemplo para: babb

Estado atual | Simbolo de entrada | Proximo estado
    0                   b               0
    0                   a               1
    1                   b               2
    2                   b               3


Exemplo para: abbababb

Estado atual | Simbolo de entrada | Proximo estado
    0                 a                 0
    0                 b                 0
    0                 b                 0
    0                 a                 0
    0                 b                 0
    0                 a                 1
    1                 b                 2
    2                 b                 3

Exemplos de tokens possiveis:

  - Identificadors: x, y, minha_variavel. meu_procedimento;
  - Palavras reservadas e simbolos especiais: while, for, :=, <>
  - Numeros inteiros e reais

Nao basta identificar o token, deve-se retornalo ao analisador sintatico junto com a cadeia
correspondente:
  - Concatecanao da cadeia conforme o automato é percorrido;
  - Associacao de acoes aos estados finais do automato

As vezes, para se decidir por um token, tem-se que se ler um caracter a mais, o qual deve ser
devolvido ä cadeia de entrada depois
  - funcao retroceder()


Exemplo: automato para os simbolos := e :

   :      =
q0--->q1--->q2 retornar(:=, simb_atrib)
      \
       \outro
        \
         \
          q3 retornar(:, simb_dp)
             retroceder()

"outro" é qualquer caracter diferente de =

* Precisa ser devolvido á entrada pois pode ser o inicio de um novo token
  var x : integer;
          |

Explicando: se eu tiver uma cadeia assim := eu vou retornar o simb_atrib
mas se eu tiver uma cadeia diferente disso eu retorno simb_dp e uso a retroceder
para que o caracter que eu esteja analisando atualmente seja novamente analisador,
por exemplo o caso var x : integer; onde o proximo caracter apos o : é o i, eu envio
novamente para o automato


Exemplo automato para operadores relacionais: >, >=, <, <=, = e <>

Automato(Sigma, Q, Delta, Q0, F)
G = Automato_operadores_relacionais(
  {>, <, =}, 
  {q0, q1, q2, q3, q4, q5, q6, q7, q8}, 
  {simb_menor_igual, simb_dif, simb_menor, simb_igual, simb_maior_igual, simb_maior}
  {q0},
  {q2, q3, q4, q5, q7, 8q}
)

   <     =
q0--->q1--->q2 retornar(<=, simb_menor_igual)
\ \   \\    >
 \  \  \\---------->q3 retornar(<>, simb_dif)
  \  \  \  outro
  \>  \  \------>q4 retornar(<, simb_menor); 
   \   \             retroceder()
    \   \    =
     \   \-------> q5 retornar(=, simb_igual)
      \
       \   =
        q6---->q7 retornar(>=, simb_maior_igual)
          \
           \outro
            \
             \q8 retornar(>, simb_maior)
                 retroceder()



Automato para identificadores
   
          |  === loop
         | |  

     letra|digito
          |
   letra | |  outro
q0------->q1-------->q2 retornar(cadeia, id)
                        retroceder()


Automatos para palavras reservadas

'' | \t | \n     letra|digito
 |                    |
| |     letra        | |    outro
q0------------------->q1------------>q2 se busca_tabela_hash(cadeia)=verdadeiro
                                         entao retornar(cadeia, cadeia/token)
                                         senao reotornar(cadeia, id)
                                       retroceder()


Tratamento de errors

idelamente, a compilacao nao pode parabras

opcoes para recuperacao de error- Exemplo beg#inesperado
  Deletar o caracter lido ate o error e comecar a analise no proximo caracter nao lido
   retornar <in,t_id>
  Deletar o caracter ilegal e continuar a analise:
   retornar pares <beg.t_id> e <in.t_id>
  Nao distinguir error lexios, i.e, associa-se um token `nada` ao error e deixa-se A
  identificacao do error para proxima etapa
   retornar pares <beg.t_id> <#, t_nada> e <in,t_id>

Em qualquer caso, errors devem ser relatados
  <#, error_lexico> ou <#, caractere_invalidos> na linha xxx


